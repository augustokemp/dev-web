version: "3.7"
services:

  db:
    image: postgres:14
    command: postgres -c 'max_connections=200' -c 'shared_buffers=1GB' -c 'effective_cache_size=3GB' -c 'maintenance_work_mem=256MB' -c 'checkpoint_completion_target=0.9' -c 'wal_buffers=16MB' -c 'default_statistics_target=100' -c 'random_page_cost=4' -c 'effective_io_concurrency=2' -c 'work_mem=2621kB' -c 'min_wal_size=1GB' -c 'max_wal_size=4GB' -c 'idle_in_transaction_session_timeout=5min' -c 'statement_timeout=5min'
    tty: true
    shm_size: 128m
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
      - type: tmpfs
        target: /dev/shm
        tmpfs:
           size: 200m
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    build:
      context: ./db
    ports:
      - "5433:5432"
    networks:
      dev-network:
          ipv4_address: 172.29.0.7

  backend:
    image: "${DOCKER_IMAGE_BACKEND}:${TAG-latest}"
    ports:
      - "8000:80"
    environment:
      - SERVER_NAME=${DOMAIN}
      - SERVER_HOST=http://${DOMAIN}
      - TAG=${TAG}
    volumes:
      - ./api/app:/app
    env_file:
      - .env
    build:
      context: ./api
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    command: /start-reload.sh
    networks:
      dev-network:
          ipv4_address: 172.29.0.4
          
  frontend:
    image: "${DOCKER_IMAGE_FRONTEND}:${TAG-latest}"
    ports:
      - "8080:8080"
    volumes:
      - ./spa:/app/
    env_file:
      - .env
    build:
      context: ./spa
      args:
        FRONTEND_ENV: ${FRONTEND_ENV}
    environment:
      - NODE_ENV=development
    command: npm run serve # -- --public 0.0.0.0:8080
    networks:
      dev-network:
          ipv4_address: 172.29.0.5

volumes:
  app-db-data:

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.2/16
          gateway: 172.29.0.1