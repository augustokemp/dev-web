import { createDecorator } from 'vue-class-component';
export const createMapDecorator = function (mapper, vueProp) {
    return function (options, key) {
        // key will be defined as the property name if using the decorator without the function syntax. Ex: @Decorator myProp
        let prop = key !== null && key !== void 0 ? key : options;
        const decorator = createDecorator((options, key) => {
            if (!options[vueProp])
                options[vueProp] = {};
            // Determine if a namespace is being used by checking for '/' delimeter
            let namespace = undefined;
            const index = prop.lastIndexOf('/');
            const usingNamespace = index !== -1;
            let map = { [key]: prop };
            if (usingNamespace) {
                namespace = prop.slice(0, index);
                prop = index === prop.length - 1 ? key : prop.slice(index + 1);
                map = { [key]: prop };
                options[vueProp][key] = mapper(namespace, map)[key];
            }
            else {
                options[vueProp][key] = mapper(map)[key];
            }
        });
        return key ? decorator(options, key) : decorator;
    };
};
